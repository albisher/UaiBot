# UaiBot - Terminal Assistant

UaiBot is an AI-powered terminal assistant that helps users interact with their system, execute commands, and manage USB devices.

## Project Structure

The project has been restructured into a more modular design with the following components:

```
UaiBot/
├── command_processor/              # Command processing functionality
│   ├── __init__.py
│   └── command_processor.py        # Handles command processing and routing
├── device_manager/                 # USB device management
│   ├── __init__.py
│   └── usb_detector.py             # Detects and lists USB devices
├── screen_handler/                 # Screen session management
│   ├── __init__.py
│   ├── screen_manager.py           # Manages screen sessions
│   └── session_manager.py          # Additional screen session functionality
├── tests/                          # Test suite
│   ├── __init__.py
│   ├── run_tests.py                # Master test runner
│   ├── test_architecture.py        # Tests for modular architecture
│   ├── test_multilingual.py        # Tests for multilingual support
│   ├── test_screen_sessions.py     # Tests for screen session functionality
│   ├── test_enhanced_shell.py      # Tests for shell functionality
│   ├── test_modular.py             # Tests for modular components
│   └── test_ollama.py              # Tests for Ollama integration
├── utils/                          # Common utility functions
│   └── __init__.py
├── core/                           # Core functionality 
│   ├── ai_handler.py               # AI integration
│   ├── platform_commands.py        # Platform-specific commands
│   ├── shell_handler.py            # Shell command execution
│   └── utils.py                    # Core utility functions
└── main.py                         # Main entry point
```

## Module Descriptions

### command_processor

Processes user commands and determines how they should be handled:
- Determine if commands should run locally or on a screen session
- Handle USB-specific queries
- Route commands to the appropriate handler

### device_manager

Handles USB device detection and management:
- Detect and list connected USB devices
- Format device information in a user-friendly way
- Generate commands for remote device detection

### screen_handler

Manages screen sessions and communication:
- List active screen sessions
- Send commands to screen sessions
- Manage screen session connectivity

### utils

Common utility functions used across the application:
- Platform detection and information
- Configuration loading
- Path management

### core

Core functionality for the application:
- AI integration for command suggestions
- Shell command execution
- Safety checks and command validation

## Usage

Run UaiBot with the following command:

```bash
python main.py
```

Options:
- `-c, --command`: Execute a single command and exit
- `-q, --quiet`: Run in quiet mode with minimal output

## Features

- **AI-Powered Command Suggestions**: Get AI suggestions for commands based on natural language input
- **USB Device Management**: Detect and interact with connected USB devices
- **Screen Session Integration**: Send commands to screen sessions for remote device management
- **Multilingual Support**: Process commands in multiple languages, including English and Arabic

## Testing

UaiBot includes a comprehensive test suite to ensure functionality across all modules:

```bash
# Run all tests
python tests/run_tests.py

# Run only architecture tests
python tests/run_tests.py --architecture

# Run only multilingual tests
python tests/run_tests.py --multilingual

# Run only screen session tests
python tests/run_tests.py --screen

# Run a quick test suite (skips longer tests)
python tests/run_tests.py --quick
```

The test suite covers:
- **Architecture Tests**: Validate the modular component structure
- **Multilingual Tests**: Test commands in different languages
- **Screen Session Tests**: Verify screen session management functionality
- **Enhanced Shell Tests**: Test shell command execution features
- **Modular Tests**: Validate individual module functionality
- **Ollama Integration**: Test AI integration with Ollama
- **Cross-Platform Support**: Works on macOS, Linux, and Windows

## Example Commands

- `show usb devices` - List all connected USB devices with details
- `send "ls -la" to screen` - Send a command to an active screen session
- `check temperature on the connected device` - Query system temperature on a connected device via screen
