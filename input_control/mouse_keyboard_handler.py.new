#!/usr/bin/env python3
"""
Mouse and Keyboard Control Module for UaiBot (Compatibility Layer)

This module provides backward compatibility with code that imports from the
original input_control.mouse_keyboard_handler path. It forwards all calls to the
new platform-specific implementation.
"""
import os
import sys
import warnings
from typing import Tuple, List, Union, Any, Optional, Callable

# Add project root to sys.path to enable imports
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, ".."))
sys.path.append(project_root)

# Attempt to import from platform_uai first
try:
    from platform_uai.platform_utils import get_input_handler
    
    # Get the appropriate platform-specific handler
    _platform_handler = get_input_handler()
    
    if _platform_handler:
        warnings.warn(
            "Importing from input_control.mouse_keyboard_handler is deprecated. "
            "Please import directly from platform_uai modules instead.",
            DeprecationWarning, stacklevel=2
        )
    else:
        # Fall back to common implementation if platform handler is not available
        from platform_uai.common.input_control.mouse_keyboard_handler import MouseKeyboardHandler
        _platform_handler = MouseKeyboardHandler()
        
except ImportError as e:
    # If platform_uai cannot be imported, fall back to common implementation
    # with a clear warning about what went wrong
    import traceback
    print(f"Error importing platform-specific input handler: {e}")
    print("Traceback:")
    traceback.print_exc()
    print("Falling back to common implementation")
    
    from platform_uai.common.input_control.mouse_keyboard_handler import MouseKeyboardHandler
    _platform_handler = MouseKeyboardHandler()

# Create compatibility class that forwards all calls to the platform-specific implementation
class MouseKeyboardHandler:
    """
    Compatibility wrapper for the mouse and keyboard handler.
    This class forwards all calls to the platform-specific implementation.
    """
    
    def __init__(self):
        """
        Initialize the compatibility wrapper.
        This will forward to the platform-specific implementation.
        """
        # No initialization needed - we'll use the singleton instance
        pass
    
    def __getattr__(self, name):
        """Forward all attribute access to the platform-specific implementation."""
        return getattr(_platform_handler, name)
    
    # Explicitly define the most commonly used methods for better IDE support
    
    def get_mouse_position(self) -> Tuple[int, int]:
        """Get the current mouse position."""
        return _platform_handler.get_mouse_position()
    
    def get_screen_size(self) -> Tuple[int, int]:
        """Get the screen size."""
        return _platform_handler.get_screen_size()
    
    def move_mouse(self, x: int, y: int, duration: float = 0.25) -> bool:
        """Move the mouse to the specified coordinates."""
        return _platform_handler.move_mouse(x, y, duration)
    
    def click_mouse(self, x: Optional[int] = None, y: Optional[int] = None, 
                   button: str = 'left', clicks: int = 1) -> bool:
        """Click the mouse at the specified coordinates."""
        return _platform_handler.click_mouse(x, y, button, clicks)
    
    def press_key(self, key: str) -> bool:
        """Press a single key."""
        return _platform_handler.press_key(key)
    
    def type_text(self, text: str, interval: float = 0.0) -> bool:
        """Type text with an optional interval between keypresses."""
        return _platform_handler.type_text(text, interval)
    
    def hotkey(self, *keys) -> bool:
        """Press multiple keys simultaneously."""
        return _platform_handler.hotkey(*keys)
    
    def is_key_pressed(self, key: str) -> bool:
        """Check if a key is currently pressed."""
        return _platform_handler.is_key_pressed(key)
    
    def scroll(self, clicks: int, x: Optional[int] = None, y: Optional[int] = None) -> bool:
        """Scroll the mouse wheel."""
        return _platform_handler.scroll(clicks, x, y)
