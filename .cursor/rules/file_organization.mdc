---
description: 
globs: 
alwaysApply: true
---
# File Organization Rules

## Directory Structure
```
Labeeb/
├── .github/                    # GitHub specific configurations
├── .vscode/                    # VS Code specific configurations
├── .venv/                      # Python virtual environment
├── __pycache__/               # Python bytecode cache
├── .cache/                    # Cache directory
├── .cursor/                   # Cursor IDE specific files
├── .pytest_cache/            # Pytest cache directory
├── config/                    # Configuration files
├── data/                      # Data storage directory
├── docs/                      # Documentation files
├── htmlcov/                   # HTML coverage reports
├── locales/                   # Internationalization files
├── logs/                      # Log files
├── plugins/                   # Plugin modules
├── research/                  # Research related files
├── scripts/                   # Utility scripts
├── src/                       # Source code
├── tests/                     # Test files
├── todo/                      # TODO and task management
├── .coverage                  # Coverage data file
├── .gitignore                 # Git ignore rules
├── .pre-commit-config.yaml    # Pre-commit hooks configuration
├── COMMERCIAL_LICENSE         # Commercial license file
├── LICENSE                    # Project license file
├── README.md                  # Project documentation
├── coverage.xml              # XML coverage report
├── install.sh                # Installation script
├── pyproject.toml            # Python project configuration
├── requirements.txt          # Python dependencies
├── setup.py                  # Python package setup
└── tox.ini                   # Tox configuration
```

## Source Code Structure (src/)
```
src/
├── app/                      # Main application code
│   ├── core/                 # Core functionality
│   │   ├── ai/              # AI related modules
│   │   │   ├── tools/         # All ai tools implementation
│   │   │   └── agents/      # Agent implementations
│   │   └── platform_core/   # Platform specific code
│   │       ├── ubuntu/      # Ubuntu specific implementations
│   │       ├── windows/     # Windows specific implementations
│   │       ├── mac/         # macOS specific implementations
│   │       └── linux/       # Linux specific implementations
│   └── ui/                  # User interface components
```

## Test Structure (tests/)
```
tests/
├── unit/                     # Unit tests
├── agents/                   # Agent specific tests
│   ├── planner/             # Planner agent tests
│   ├── executor/            # Executor agent tests
│   ├── communicator/        # Communicator agent tests
│   └── specialists/         # Specialist agent tests
├── tools/                    # Tool specific tests
├── models/                   # Model specific tests
├── workflows/               # Workflow specific tests
├── protocols/               # Protocol specific tests
└── integration/             # Integration tests
```

## Documentation Structure (docs/)
```
docs/
├── agents_tools/            # Agent and tool documentation
├── api/                     # API documentation
├── guides/                  # User guides
├── examples/                # Example code and usage
├── master/                  # master prompts
└── secret/                  # secret
```

## Configuration Structure (config/)
```
config/
├── development/            # Development configuration
├── production/             # Production configuration
└── testing/                # Testing configuration
```

## Plugin Structure (plugins/)
```
plugins/
├── core/                  # Core plugins
├── extensions/            # Plugin extensions
└── integrations/          # Third-party integrations
```

## Scripts Structure (scripts/)
```
scripts/
├── audit_project.py       # Project audit script
├── setup/                 # Setup scripts
└── utils/                 # Utility scripts
```

## Data Structure (data/)
```
data/
├── models/               # Model data
├── training/            # Training data
└── cache/              # Cached data
```

## Logs Structure (logs/)
```
logs/
├── application/         # Application logs
├── error/              # Error logs
└── audit/              # Audit logs
```

## Module Organization
1. Core Modules
   - Abstract base classes
   - Interfaces
   - Core functionality
   - Type definitions
   - Event system

2. Feature Modules
   - Command processing
   - AI integration
   - Shell handling
   - UI components
   - Plugin system

3. Utility Modules
   - Configuration
   - Logging
   - Security
   - Helpers
   - Common types

4. Test Modules
   - Unit tests
   - Integration tests
   - Test fixtures
   - Mock objects
   - Test utilities

## File Naming
- Use snake_case for files
- Use PascalCase for classes
- Use descriptive names
- Follow Python conventions
- Include type hints

## Import Structure
- Absolute imports
- Clear dependencies
- No circular imports
- Minimal imports
- Type imports

## Best Practices
- One class per file
- Clear module boundaries
- Proper package structure
- Version control friendly
- Documentation ready

## File Creation Rules
1. Files must be created in their correct directory immediately
2. No files should be created in the root directory
3. Each file must follow the project's naming conventions
4. File organization must be verified before committing changes

## File Modification Rules
1. Files must remain in their designated directories
2. Moving files requires updating all related imports and references
3. File structure must be maintained during modifications
4. All file paths must be relative to the project root

## Directory-Specific Rules
- `src/app/`: Contains all application source code
  - `core/`: Core functionality and base classes
  - `ui/`: User interface components
  - `platform_core/`: Platform-specific implementations

- `tests/`: Contains all test files
  - `unit/`: Unit tests
  - `integration/`: Integration tests
  - `agents/`: Agent-specific tests
  - `tools/`: Tool-specific tests

- `scripts/`: Contains all executable scripts
  - `setup/`: Setup and installation scripts
  - `utils/`: Utility scripts
  - `audit_project.py`: Project audit script

- `config/`: Contains all configuration files
  - `development/`: Development configurations
  - `production/`: Production configurations
  - `testing/`: Testing configurations

## Verification Process
1. Check file location before creation/modification
2. Verify directory structure compliance
3. Update related files if moving/renaming
4. Run tests to ensure no broken references
5. Document any structural changes

## Enforcement
- Automated checks must be run before commits
- Directory structure must be maintained in CI/CD
- File organization must be part of code review
- Violations must be fixed immediately

# File Organization & Cleanup (Core Principle)

- File organization and cleanup is strictly enforced.
- No files should be left in the root except LICENSE, README, and config files.
- Placement rules:
  - Test artifacts: `tests/fixtures/` or `tests/outputs/`
  - Logs: `logs/`
  - State/context: `src/app/core/state/`
  - Registry/config: `src/app/core/`
  - Scripts/entry-points: `scripts/`
  - License: project root
- All contributors must follow these rules for every commit.
- Regular file audits must be performed after major changes.
- Violations must be fixed immediately before merging or release.
