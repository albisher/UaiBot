---
description: 
globs: 
alwaysApply: true
---
# File Organization Rules

## Directory Structure
```
src/
├── labeeb/
│   ├── core/
│   │   ├── ai/
│   │   │   ├── models/
│   │   │   ├── prompts/
│   │   │   └── registry.py
│   │   ├── commands/
│   │   │   ├── processors/
│   │   │   ├── validators/
│   │   │   └── executors/
│   │   ├── shell/
│   │   │   ├── handlers/
│   │   │   └── safety/
│   │   └── events/
│   ├── ui/
│   │   ├── cli/
│   │   ├── gui/
│   │   └── web/
│   ├── utils/
│   │   ├── config/
│   │   ├── logging/
│   │   └── security/
│   └── plugins/
├── tests/
│   ├── unit/
│   ├── integration/
│   └── fixtures/
├── docs/
│   ├── api/
│   ├── user/
│   └── dev/
└── examples/
```

## Module Organization
1. Core Modules
   - Abstract base classes
   - Interfaces
   - Core functionality
   - Type definitions
   - Event system

2. Feature Modules
   - Command processing
   - AI integration
   - Shell handling
   - UI components
   - Plugin system

3. Utility Modules
   - Configuration
   - Logging
   - Security
   - Helpers
   - Common types

4. Test Modules
   - Unit tests
   - Integration tests
   - Test fixtures
   - Mock objects
   - Test utilities

## File Naming
- Use snake_case for files
- Use PascalCase for classes
- Use descriptive names
- Follow Python conventions
- Include type hints

## Import Structure
- Absolute imports
- Clear dependencies
- No circular imports
- Minimal imports
- Type imports

## Best Practices
- One class per file
- Clear module boundaries
- Proper package structure
- Version control friendly
- Documentation ready

## File Creation Rules
1. Files must be created in their correct directory immediately
2. No files should be created in the root directory
3. Each file must follow the project's naming conventions
4. File organization must be verified before committing changes

## File Modification Rules
1. Files must remain in their designated directories
2. Moving files requires updating all related imports and references
3. File structure must be maintained during modifications
4. All file paths must be relative to the project root

## Directory-Specific Rules
- `app/`: Contains all application source code
  - `core/`: Core functionality and base classes
  - `utils/`: Utility functions and helper modules
  - `models/`: Data models and schemas
  - `services/`: Service layer implementations
  - `api/`: API endpoints and routes

- `tests/`: Contains all test files
  - `unit/`: Unit tests
  - `integration/`: Integration tests
  - `fixtures/`: Test fixtures and data

- `scripts/`: Contains all executable scripts
  - `setup/`: Setup and installation scripts
  - `maintenance/`: Maintenance and utility scripts
  - `deployment/`: Deployment-related scripts

- `config/`: Contains all configuration files
  - `environments/`: Environment-specific configs
  - `templates/`: Configuration templates

## Verification Process
1. Check file location before creation/modification
2. Verify directory structure compliance
3. Update related files if moving/renaming
4. Run tests to ensure no broken references
5. Document any structural changes

## Enforcement
- Automated checks must be run before commits
- Directory structure must be maintained in CI/CD
- File organization must be part of code review
- Violations must be fixed immediately

# File Organization & Cleanup (Core Principle)

- File organization and cleanup is strictly enforced.
- No files should be left in the root except LICENSE, README, and config files.
- Placement rules:
  - Test artifacts: `tests/fixtures/` or `tests/outputs/`
  - Logs: `log/`
  - State/context: `src/labeeb/state/`
  - Registry/config: `src/labeeb/core/`
  - Scripts/entry-points: `scripts/`
  - License: project root
- All contributors must follow these rules for every commit.
- Regular file audits must be performed after major changes.
- Violations must be fixed immediately before merging or release.
