---
description: 
globs: 
alwaysApply: false
---
# Input Handling Rules

## Input Processing
```python
@dataclass
class UserInput:
    text: str
    source: str
    timestamp: datetime
    context: Dict[str, Any]
    metadata: Dict[str, Any]

class InputProcessor:
    def process(self, input: UserInput) -> Command:
        """Process user input into a command."""
        pass
```

## Input Sources
1. CLI Input
   - Command line arguments
   - Interactive input
   - File input
   - Pipe input
   - Redirect input

2. GUI Input
   - Text input
   - Button clicks
   - Menu selections
   - Drag and drop
   - Keyboard shortcuts

3. API Input
   - REST endpoints
   - WebSocket messages
   - GraphQL queries
   - Event streams
   - Webhooks

## Input Validation
- Syntax checking
- Semantic validation
- Context validation
- Permission checking
- Resource validation

## Input Processing Pipeline
1. Pre-processing
   - Text normalization
   - Language detection
   - Context extraction
   - Intent detection
   - Parameter extraction

2. Processing
   - Command generation
   - Parameter validation
   - Safety assessment
   - Resource check
   - Permission check

3. Post-processing
   - Response formatting
   - Error handling
   - Logging
   - Event emission
   - State update

## Best Practices
- Use type hints
- Implement validation
- Handle errors gracefully
- Support async processing
- Maintain input history

- Core Philosophy:
  * Labeeb acts as an expert system with unlimited capabilities
  * No predefined limitations on what tasks can be performed
  * Treat each request as a unique expert task
  * Adapt to any domain or task the user requests
  * Use available system resources and tools to accomplish tasks
  * Think creatively about task solutions

- Command Interpretation:
  * Treat every input as a potential expert task
  * Don't limit to predefined categories or patterns
  * Understand context and intent deeply
  * Consider multiple approaches to each task
  * Look for optimal solutions
  * Think outside the box when needed

- Task Categories (Non-Limiting Examples):
  * System Operations
  * File Management
  * Application Control
  * Network Operations
  * Development Tasks
  * Security Operations
  * Performance Optimization
  * User Interface Tasks
  * Data Management
  * System Maintenance
  * Application Testing
  * Development Environment
  * System Configuration
  * File Operations
  * Process Management
  * Network Operations
  * Security Operations
  * Performance Operations
  * Maintenance Operations
  * Testing Operations
  * Development Operations
  * Configuration Operations
  * Any other expert-level task

- Command Patterns (Examples, Not Limitations):
  * Questions
  * Directives
  * Checks
  * Lists
  * Finds
  * Verifications
  * Monitors
  * Tests
  * Any other pattern

- Input Processing Rules:
  * Approach each request as a unique expert task
  * Don't limit to predefined patterns
  * Support any form of natural language input
  * Understand context and intent
  * Consider multiple solution approaches
  * Maintain conversation history for context
  * Allow for complex, multi-step operations
  * Support task chaining and sequencing
  * Enable creative problem-solving
  * Adapt to user's expertise level

- Response Formatting:
  * Provide expert-level responses
  * Include detailed explanations when needed
  * Format technical information clearly
  * Structure complex responses logically
  * Use appropriate formatting for different data types
  * Include error messages when needed
  * Provide alternative solutions
  * Include progress indicators for long operations
  * Format lists and tables appropriately
  * Include units and measurements where relevant
  * Add expert insights and recommendations
  * Explain complex concepts clearly
  * Provide context-aware suggestions
  * Include best practices and tips
  * Offer optimization suggestions

# GUI/CLI Input Handling

- All user input (text, file, voice) must be routed through the agentic core (Agent, ToolRegistry, etc.)
- No direct file writes outside designated directories (use safe_path or equivalent)
- All outputs must use safe_path or equivalent
- GUI/CLI must document and enforce these requirements
