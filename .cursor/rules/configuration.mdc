---
description: 
globs: 
alwaysApply: true
---
# Configuration Rules

## Configuration Structure
1. Core Settings
   - Use dataclasses for config objects
   - Type-safe configuration
   - Environment variable support
   - Default values
   - Validation rules

2. Model Settings
   - Model registry configuration
   - Provider-specific settings
   - API keys and endpoints
   - Model parameters
   - Fallback options

3. User Settings
   - User preferences
   - Custom directories
   - UI preferences
   - Command history
   - Safety settings

4. System Settings
   - Logging configuration
   - Performance settings
   - Security parameters
   - Plugin settings
   - Feature flags

## Configuration Objects
```python
@dataclass
class ModelConfig:
    provider: str
    model_name: str
    api_key: Optional[str]
    parameters: Dict[str, Any]
    fallback: Optional[str]

@dataclass
class UserConfig:
    preferences: Dict[str, Any]
    directories: Dict[str, Path]
    safety_level: SafetyLevel
    theme: str
    language: str
```

## Configuration Management
- Use YAML/JSON for storage
- Support hot reloading
- Validate on load
- Provide migration tools
- Version configuration files

## Environment Support
- Load from environment variables
- Support different environments
- Allow overrides
- Secure sensitive data
- Document all options

## Best Practices
- Use type hints for config
- Implement validation
- Support inheritance
- Enable dynamic updates
- Provide clear defaults
