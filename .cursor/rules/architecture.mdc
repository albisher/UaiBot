---
description: 
globs: 
alwaysApply: true
---
# Architecture Rules

## Core Principles
- Use modern OOP with composition over inheritance
- Implement strict layer separation
- Follow SOLID principles
- Use dependency injection
- Leverage Python's modern features

## Layer Structure
1. Core Logic Layer
   - Command parsing and validation
   - Command execution pipeline
   - Event handling and state management
   - Use dataclasses for data structures
   - Implement ABCs for interfaces

2. AI Integration Layer
   - BaseAIModel abstract base class
   - Model registry for dynamic loading
   - Model-specific implementations
   - Type hints for all interfaces
   - Async support for API calls

3. Shell/System Interface Layer
   - OS abstraction
   - Command execution
   - Safety checks
   - Sandboxing
   - Event-driven command monitoring

4. UI/API Layer
   - CLI interface
   - GUI components
   - Web API
   - Event bus for UI updates
   - Response formatting

## Design Patterns
- Factory for object creation
- Observer for event handling
- Strategy for interchangeable algorithms
- Command for operation encapsulation
- Decorator for cross-cutting concerns

## Code Organization
- Feature-based directory structure
- Clear separation of concerns
- Plugin system architecture
- Modular component design
- Type-safe interfaces

## Best Practices
- Use dataclasses for data containers
- Implement ABCs for interfaces
- Use type hints throughout
- Follow PEP 8 and modern Python conventions
- Document all public interfaces

- Core Architecture:
  * Design for model-agnostic system using BaseAIModel interface
  * Support multiple AI providers through standardized interfaces
  * Allow easy model switching with fallback mechanisms
  * Maintain clear separation between components
  * Keep platform-specific code isolated
  * Design for future extensibility

- Component Organization:
  * Follow the architecture defined in architecture.md
  * Maintain clear separation between core and platform-specific code
  * Keep platform-specific code in app/platform_uai directory
  * Follow the command processing flow
  * Maintain consistent file structure
  * Document all architectural decisions

- Model Integration:
  * Use BaseAIModel abstract class for all model implementations
  * Implement model-specific classes (GoogleAIModel, OllamaAIModel)
  * Support multiple AI providers through standardized interfaces
  * Allow easy model switching with validation
  * Keep model-specific code isolated in dedicated classes
  * Maintain consistent interfaces across all models
  * Document model integration patterns and requirements

- Model Interface Requirements:
  * All models must implement BaseAIModel interface
  * Required methods: initialize(), generate(), validate_config(), get_available_models()
  * Consistent parameter handling through model_params
  * Standardized response format
  * Proper error handling and validation
  * Support for model-specific optimizations
  * Clear documentation of model capabilities and limitations
