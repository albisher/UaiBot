---
description: 
globs: 
alwaysApply: false
---
# Architecture Rules (SmolAgents, Agentic, A2A, MCP)

## Core Principles
- Use modern OOP with composition over inheritance
- Implement strict layer separation
- Follow SOLID principles
- Use dependency injection
- Leverage Python's modern features
- **Adopt agent-centric architecture using SmolAgents**
- **Prioritize local-first, minimal memory/storage, multi-language, multi-platform**
- **Integrate A2A (Agent-to-Agent) and MCP (Multi-Channel Protocol) as core features**

## Directory Structure and Naming Conventions

### AI Components (`ai/`)
- Agents: `{Purpose}Agent` (e.g., `MainAgent`, `WorkflowAgent`)
- Models: `{Provider}Model` (e.g., `GeminiModel`, `OllamaModel`)
- Tools: `{Capability}Tool` (e.g., `TranslationTool`, `ReasoningTool`)

### Core Components (`core/`)
- Capabilities: `{Feature}Capability` (e.g., `TranslationCapability`, `FileCapability`)
- Workflows: `{Process}Workflow` (e.g., `TranslationWorkflow`, `FileWorkflow`)
- Protocols: `{Protocol}Protocol` (e.g., `A2AProtocol`, `MCPProtocol`)

### Platform Services (`platform_services/`)
- Handlers: `{Platform}{Feature}Handler` (e.g., `MacOSFSHandler`, `LinuxNetHandler`)
- Common interfaces in `common/`
- Platform-specific code in respective directories (`macos/`, `linux/`, `windows/`)

### Services (`services/`)
- Service classes: `{Feature}Service` (e.g., `CacheService`, `ConfigService`)

### Tools (`tools/`)
- General tools: `{Feature}Tool` (e.g., `FileTool`, `SystemTool`)

### UI Components (`ui/`)
- Organized by interface type: `cli/`, `gui/`, `web/`

## Component Guidelines

### When to Create an Agent
- Complex orchestration needed
- Multi-step workflows required
- Agent-to-Agent collaboration
- Specialized reasoning/persona
- Default: Use tools instead of creating new agents

### When to Create a Tool
- Atomic, single-purpose capability
- Reusable functionality
- API integration
- Default: Implement new features as tools first

### When to Create a Workflow
- Multi-step process needed
- Complex task sequence
- Reusable process pattern
- Default: Use existing workflows or create new ones for complex processes

### When to Create a Capability
- Grouping related tools
- Feature-level abstraction
- Cross-cutting concerns
- Default: Create capabilities for major features

### When to Create a Protocol
- Communication standard needed
- Interface definition required
- Protocol implementation
- Default: Use existing protocols or create new ones for new communication patterns

## Best Practices
- Use dataclasses for data containers
- Implement ABCs for interfaces
- Use type hints throughout
- Follow PEP 8 and modern Python conventions
- Document all public interfaces
- Keep platform-specific code isolated
- Support RTL and multi-language
- Maintain clear separation of concerns
- Use dependency injection
- Follow SOLID principles

## References
- See docs/agents_tools/agents_and_tools.md for the current list of tools and agents
- See A2A and MCP sections for agent-to-agent and multi-channel support
- See master_arch.md for complete directory structure
