# UaiBot Output Formatting Guidelines

This document provides comprehensive guidelines for formatting UaiBot's output with balanced whitespace and effective emoji usage to create an intuitive, visually pleasing, and accessible user experience.

## 1. Whitespace Balance Principles

### 1.1. Vertical Spacing

Proper vertical spacing improves readability and content organization:

- **Section Separation**: Use double line breaks to separate major sections
- **Logical Grouping**: Use single line breaks to group related items
- **Progressive Disclosure**: Use indentation to show hierarchical relationships

Example with proper vertical spacing:

```
🤖 UaiBot System Report

📊 System Status
  CPU: 45% utilization
  RAM: 3.2GB/8GB used
  Disk: 120GB free

📱 Connected Devices
  Arduino (COM3)
  Webcam (active)

📝 Recent Commands
  ls -la
  git status
```

### 1.2. Horizontal Spacing

Balanced horizontal spacing creates visual harmony and improves scanning:

- **Consistent Padding**: Add 1-2 spaces between content sections
- **Column Alignment**: Left-align text blocks, right-align numeric values
- **Field Separation**: Use consistent spacing between labels and values

Example of balanced horizontal alignment:

```
Device Name       Type        Status      Path
---------------   ---------   ---------   -------------
Arduino Uno       Serial      Connected   /dev/ttyACM0  
Webcam C920       Video       Active      /dev/video0
External Drive    Storage     Mounted     /media/drive1
```

### 1.3. Visual Dividers

Use dividers to separate distinct content areas:

- **Full-width dividers**: Use for major section breaks (─────────────)
- **Partial dividers**: Use for subsection separation (───── or ·······)
- **Box drawing**: Use for content encapsulation (╭───╮ ╰───╯)

Example of effective divider usage:

```
╭─── Device Information ───────────────────╮
│                                          │
│  Name: Arduino Mega                      │
│  Type: Microcontroller                   │
│  Port: /dev/ttyACM0                      │
│                                          │
├─── Connection Status ────────────────────┤
│                                          │
│  Status: Connected                       │
│  Baud Rate: 115200                       │
│  Data Bits: 8                            │
│                                          │
╰──────────────────────────────────────────╯
```

## 2. Emoji Usage Guidelines

### 2.1. Functional Categorization

Organize emojis by functional categories for consistent visual language:

| Category        | Primary Emojis           | Secondary Emojis                    |
|-----------------|--------------------------|-------------------------------------|
| Status          | ✅ ⚠️ ❌ 🔄              | 🟢 🟡 🔴 ⚫                         |
| Devices         | 💻 📱 🖨️ 📷 🎮           | 🔌 💾 💿 🖱️                        |
| System          | 🤖 🔧 ⚙️ 🔐              | 📊 📈 💤 🔔                        |
| Files/Folders   | 📁 📂 📄 📝              | 📚 📊 📦 🗄️                        |
| Network         | 🌐 📡 📶 🔐              | 🌍 🔒 🔓 ⚡                         |
| Actions         | ▶️ ⏸️ ⏹️ 🔍              | ✏️ 🔄 🔎 📥                        |

### 2.2. Placement Consistency

- **Prefix for Categories**: Use emoji at the beginning of section headers
- **Status Indicators**: Place status emojis at the beginning of status lines
- **Action Buttons**: Place action emojis before action labels

Example of consistent emoji placement:

```
🖥️ System Information
  ✅ OS: macOS 11.6
  ✅ Memory: 16GB
  ⚠️ Disk Space: 10% remaining

🔌 Device Status
  🟢 Arduino (connected)
  🔴 Webcam (disconnected)
```

### 2.3. Density Guidelines

- **Primary Content**: 1 emoji per content block
- **Lists**: 1 emoji per list item
- **Status Overview**: Use emoji clusters only for critical status dashboards
- **Avoid Overuse**: Never use multiple emojis for the same concept

Example of appropriate emoji density:

```
✅ Command successful!

📋 Results:
  📁 3 directories processed
  📄 27 files analyzed
  ⚠️ 2 warnings detected
  
🕒 Operation completed in 3.5 seconds
```

## 3. Practical Implementation Examples

### 3.1. Command Output

```
$ uaibot search devices

🔍 Searching for connected devices...

📱 Found 3 devices:

  1. 📊 Arduino Mega
     │  Status: 🟢 Connected
     │  Port: /dev/ttyACM0
     └  Driver: ch340

  2. 💾 Kingston USB Drive
     │  Status: 🟢 Mounted
     │  Size: 32GB (12GB free)
     └  Mount: /media/usb0

  3. 📷 Logitech Webcam C920
     │  Status: 🟢 Available
     └  Device: /dev/video0

✅ All devices ready for use.
```

### 3.2. System Monitoring Output

```
$ uaibot monitor system

📊 System Status                   🕒 Updated: 14:35:22

┌─ Resource Usage ───────────────────────────────────────┐
│                                                        │
│  CPU: [███████▒▒▒] 68%           🟠 Moderate Load      │
│  RAM: [█████████▒] 92%           🔴 High Usage         │
│  Disk: [████▒▒▒▒▒▒] 42%          🟢 Healthy           │
│  Network: ↑12MB/s ↓3MB/s        🟢 Normal Traffic     │
│                                                        │
└────────────────────────────────────────────────────────┘

┌─ Top Processes ───────────────────────────────────────┐
│                                                       │
│  1. 🔵 chrome         CPU: 24%    MEM: 1.2GB         │
│  2. 🔵 python3        CPU: 15%    MEM: 420MB         │
│  3. 🔵 finder         CPU:  8%    MEM: 310MB         │
│                                                       │
└───────────────────────────────────────────────────────┘

💡 Tip: Consider closing unused Chrome tabs to reduce memory usage.
```

### 3.3. Help Command Output

```
$ uaibot help screen

📘 Screen Command Reference

  Control terminal screen sessions with these commands:

  screen -S NAME       Create new session named NAME
  screen -r NAME       Reattach to session NAME
  screen -ls           List all sessions
  
  Inside a screen session:
  
  Ctrl+A d            Detach from current session
  Ctrl+A c            Create new window
  Ctrl+A n            Switch to next window
  Ctrl+A p            Switch to previous window
  
  Use 'uaibot help COMMAND' for more information on other commands.
```

### 3.4. Error Message Formatting

```
❌ Error: Unable to connect to device

│  Error details:
│  • Port /dev/ttyACM0 is in use by another process
│  • Process: screen (PID 1234)
│
│  Possible solutions:
│  1. Close the other application using the device
│  2. Try using a different port
│  3. Run: sudo lsof /dev/ttyACM0 to see all processes using it
```

## 4. Implementation Recommendations

1. **Create formatting utility functions** in the codebase for consistent application:
   ```python
   def format_header(text, emoji=""):
       """Format a section header with optional emoji"""
       if emoji:
           return f"{emoji} {text}\n{'-' * (len(text) + 3)}\n"
       return f"{text}\n{'-' * len(text)}\n"
   ```

2. **Maintain an emoji dictionary** for consistent usage across the application:
   ```python
   EMOJI = {
       "success": "✅",
       "warning": "⚠️",
       "error": "❌",
       "info": "ℹ️",
       # Add more categories as needed
   }
   ```

3. **Use string alignment methods** for consistent spacing:
   ```python
   def format_table_row(label, value, width=20):
       """Format a table row with consistent spacing"""
       return f"{label:<{width}} {value}"
   ```

4. **Respect terminal width** for better display on different screens:
   ```python
   import shutil
   term_width, _ = shutil.get_terminal_size()
   divider = "─" * term_width
   ```

By implementing these formatting guidelines consistently throughout UaiBot, you'll create an intuitive, visually appealing, and professional user experience that enhances usability and makes information more accessible.
